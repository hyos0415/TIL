"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# 세팅 다 하고 나선 파이참 하단의 터미널에서 python manage.py migrate 입력
# db.sqlite3 생성확인
# python manage.py runserver 서버 실행 > 크롬에서 localhost:8000 확인
# 관리자 계정 생성 python manage.py createsuperuser
# localhost:8000/admin 로그인
# 장고에서는 모델=테이블이므로 테이블 부터 만듬
# settings > models > admin > urls > views
# 문제가 생겼을 때 migraions에서  0001_initial.py 삭제 > dbsqlite3 삭제 > make migrations > migrate

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'wt31_plk!i+@g3ay$4gsq3rko(gkf3)*y)7hwx5+p(x186q=^j'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG 개발모드, 끝나면 Flase

# 개발을 하거나 서비스를 하는 서버 컴퓨터의 IP/Domain name

ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# 현재 project안에 포함되어 있는 기능(어플리케이션)들에 대한 정의
# Application definition
# 생성한 어플리케이션 추가

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth', #DB안에 테이블을 만드는 역할
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'polls.apps.PollsConfig'  #패키지.모듈.클래스
]
#시스템 운영에 관련이 있음
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#우선적으로 해석하는 URL
ROOT_URLCONF = 'mysite.urls'

#현재는 장고가 제공하는 템플릿 사용
#추 후 템플랏 파일 이용 시 수정
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#wsgi 프로토콜 방식
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# 기본은 sqlite3 이지만, 추후 MySQL 사용 시 변경
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # os.path.join 경로 결합하여 path 생성
        # MyFirstWebPolls 에 db.sqlite3 파일 생성 후 DB로 사용
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
